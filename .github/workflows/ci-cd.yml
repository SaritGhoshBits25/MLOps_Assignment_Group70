name: MLOps CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: self-hosted
    
    steps:
    - uses: actions/checkout@v3

    - name: Install dependencies
      run: |
        py -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run data preprocessing
      run: py src/data_preprocessing.py

    - name: Train models
      run: py src/train.py

    - name: Run tests
      run: pytest tests/ -v

    - name: Test API startup
      run: |
        Start-Process -NoNewWindow python src/api.py
        Start-Sleep -Seconds 60
        try {
            $response = Invoke-WebRequest -Uri "http://localhost:8000/health" -UseBasicParsing
            if ($response.StatusCode -ne 200) {
                Write-Host "Health check failed with status code $($response.StatusCode)"
                exit 1
            }
        }
        catch {
            Write-Host "Error during health check: $($_.Exception.Message)"
            exit 1
        }
        Get-Process python | Where-Object { $_.Path -like "*python.exe" -and $_.StartInfo.Arguments -like "*src/api.py*" } | Stop-Process

  build-and-push:
    needs: test
    runs-on: self-hosted
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3

    - name: Install dependencies and train model
      run: |
        py -m pip install --upgrade pip
        pip install -r requirements.txt
        py src/data_preprocessing.py
        py src/train.py

    - name: Build Docker image
      run: docker build -t iris-api:latest .

    - name: Test Docker container
      run: |
        docker run -d -p 8000:8000 --name test-container iris-api:latest
        Start-Sleep -Seconds 60
        try {
            $response = Invoke-WebRequest -Uri "http://localhost:8000/health" -UseBasicParsing
            if ($response.StatusCode -ne 200) {
                Write-Host "Health check failed with status code $($response.StatusCode)"
                exit 1
            }
        }
        catch {
            Write-Host "Error during health check: $($_.Exception.Message)"
            exit 1
        }
        docker stop test-container
        docker rm test-container
        
    - name: Log in to Docker Hub
      if: true  # Enable when Docker Hub secrets are set
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Push to Docker Hub
      if: true  # Enable when you want to push
      run: |
        docker tag iris-api:latest wp1412011989/iris-api:latest
        docker push wp1412011989/iris-api:latest

  deploy:
    needs: build-and-push
    runs-on: self-hosted
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Run Docker container
      run: |
        docker stop iris_container 2>$null || echo "No container to stop"
        docker rm iris_container 2>$null || echo "No container to remove"
        docker run -d -p 8000:8000 --name iris_container wp1412011989/iris-api:latest

    - name: Deploy notification
      run: |
        echo "Deployment complete."
        echo "Production container running on port 8000."
